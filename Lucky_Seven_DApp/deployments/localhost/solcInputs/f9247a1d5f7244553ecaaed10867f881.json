{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/luckyseven.sol": {
      "content": "/**\n * A contract to demonstrate a decentralized Lucky seven game\n */\n\npragma solidity ^0.8.17;\n\ncontract luckyseven {\n    enum choices {below_seven,seven,above_seven}\n    uint public poolMoney=0;\n    constructor() payable {\n        poolMoney = msg.value;\n    }\n    event output(choices userChoice, uint result);\n    function getLucky(choices choice) public payable {\n        require(poolMoney >= 2*msg.value, \"Not enough pool money\");\n        require(msg.value>0,\"Atleast a wei must be sent\");\n        uint result = (uint(keccak256(abi.encodePacked(blockhash(block.number-uint(choice)),block.timestamp, block.difficulty))) % 14) + 1;\n        if(result==7 && choice==choices.seven || \n            result<7 && choice==choices.below_seven || \n            result>7 && choice==choices.above_seven ) {\n            poolMoney = poolMoney - 2*msg.value;\n            payable(msg.sender).transfer(2*msg.value);\n        }\n        else {\n            poolMoney = poolMoney + msg.value;\n        }\n        emit output(choice, result);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}